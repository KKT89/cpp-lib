{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Library Files","text":"<p>\u3044\u308d\u3044\u308d\u6574\u5099\u4e2d\u3067\u3059\u30fb\u30fb\u30fb\uff08\u3000\uff3e\u03c9\uff3e\uff09</p>"},{"location":"#sample","title":"sample","text":"<ul> <li>sample.hpp</li> </ul>"},{"location":"#graph","title":"Graph","text":"<ul> <li>Bellman Ford (\u8ca0\u9589\u8def\u691c\u51fa)</li> </ul>"},{"location":"library/graph/bellman_ford/","title":"Bellman Ford (\u8ca0\u9589\u8def\u691c\u51fa)","text":""},{"location":"library/graph/bellman_ford/#reference","title":"Reference","text":"<ul> <li>ABC137-E:Coins Respawn ~\u8ca0\u9589\u8def\u691c\u51fa\u306b\u3064\u3044\u3066~ - \u601d\u8003\u306e\u5893\u5834</li> </ul>"},{"location":"library/graph/bellman_ford/#code","title":"Code","text":"<pre><code>#pragma once\n\ntemplate &lt;typename T&gt; struct BellmanFord {\n  private:\n    static constexpr T INF = numeric_limits&lt;T&gt;::max() / 2 - 1;\n\n    struct Edge {\n        int to;\n        T cost;\n    };\n\n    int n;\n    vector&lt;vector&lt;Edge&gt;&gt; G;\n    vector&lt;T&gt; dist;\n\n  public:\n    explicit BellmanFord(int n) : n(n), G(n), dist(n, INF) {}\n\n    void add_edge(int from, int to, T cost) { G[from].emplace_back(to, cost); }\n    template &lt;class Iter&gt; void build(Iter first, Iter last) {\n        dist.assign(n, INF);\n        for (auto it = first; it != last; ++it) {\n            dist[*it] = 0;\n        }\n        relax_edges();\n        spread_neg_cycles();\n    }\n    void build(int s) { build(&amp;s, &amp;s + 1); }\n\n    [[nodiscard]] bool reachable(int v) const { return dist[v] != INF; }\n    [[nodiscard]] bool on_negative_cycle(int v) const { return dist[v] == -INF; }\n    [[nodiscard]] bool valid(int v) const { return reachable(v) and !on_negative_cycle(v); }\n    [[nodiscard]] T distance(int v) const { return dist[v]; }\n\n  private:\n    // \u30d9\u30eb\u30de\u30f3\u30d5\u30a9\u30fc\u30c9\n    void relax_edges() {\n        for (int i = 0; i &lt; n; ++i) {\n            bool updated = false;\n            for (int u = 0; u &lt; n; ++u) {\n                if (dist[u] == INF) continue;\n                for (auto [v, w] : G[u]) {\n                    if (dist[v] &gt; dist[u] + w) {\n                        dist[v] = dist[u] + w;\n                        if (i == n - 1 || dist[v] &lt; -INF) dist[v] = -INF;\n                        updated = true;\n                    }\n                }\n            }\n            if (!updated) break;\n        }\n    }\n    // \u8ca0\u9589\u8def\u3092BFS\u3067\u4f1d\u64ad\u3055\u305b\u308b\n    void spread_neg_cycles() {\n        queue&lt;int&gt; q;\n        vector&lt;bool&gt; used(n, false);\n        for (int i = 0; i &lt; n; ++i) {\n            if (dist[i] == -INF) {\n                used[i] = true;\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (auto [v, w] : G[u]) {\n                if (!used[v]) {\n                    used[v] = true;\n                    dist[v] = -INF;\n                    q.push(v);\n                }\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"library/sample/sample/","title":"Sample Library (a+b)","text":"<p>\u30b5\u30f3\u30d7\u30eb\u6587\u7ae0\u3067\u3059\u3002\u6570\u5f0f\u3082\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\\(a+b\\) $$ \\sum_{i=1}^{n} = n(n+1)/2 $$ \u3042\u3042\u3042</p>","tags":["sample"]},{"location":"library/sample/sample/#_1","title":"\u30c6\u30b9\u30c8","text":"<p>Failure</p> <p>\u3053\u308c\u306f\u5931\u6557\u3067\u3059\u3002</p> <p>Bug</p> <p>\u3053\u308c\u306f\u30d0\u30b0\u3067\u3059\u3002</p> <p>Summary</p> <p>\u3053\u308c\u306f\u6982\u8981\u3067\u3059\u3002</p> <p> \u30d3\u30eb\u30c9\u6210\u529f (\u30a2\u30a4\u30b3\u30f3\u3082\u4f7f\u3048\u307e\u3059)</p> <pre><code>#pragma once\n\n// sample.hpp\nint add(int a, int b){\n    return a + b;\n}\n</code></pre>","tags":["sample"]},{"location":"note/bitwise_operation/","title":"\u30d3\u30c3\u30c8\u6f14\u7b97\u3042\u308c\u3053\u308c","text":""},{"location":"note/bitwise_operation/#0","title":"\u672b\u5c3e\u306e0\u500b\u6570","text":"<p>c++20\u4ee5\u964d\u306a\u3089\u3070\u3001std::countr_zero \u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3002</p>"},{"location":"note/bitwise_operation/#1","title":"1\u304c\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u5168\u3066\u77e5\u308a\u305f\u3044","text":"<p>\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u5b9a\u6570\u500d\u8efd\u304f\u3066\u304a\u30b9\u30b9\u30e1\u3002TODO\uff1a\u2191\u3067\u66f8\u304d\u63db\u3048\u308b\u3002</p> <pre><code>while(n) {\n  int i = __builtin_ctz(n);\n  n ^= 1 &lt;&lt; i;\n}\n</code></pre>"},{"location":"note/bitwise_operation/#__builtin_clz","title":"__builtin_clz \u306e\u9ad8\u901f\u5316\u306b\u3064\u3044\u3066","text":"<p><code>target(\"lzcnt\")</code> \u3067\u901f\u304f\u306a\u308b\u3089\u3057\u3044\u3002tzcnt \u304c\u5165\u3063\u3066\u308b\u547d\u4ee4\u30bb\u30c3\u30c8\u304c BMI1 \u306a\u306e\u3067\u3001 <code>target(\"bmi\")</code>\u3092\u7528\u3044\u308b\u3002</p>"},{"location":"note/bitwise_operation/#_2","title":"\u53c2\u8003","text":"<ul> <li>https://twitter.com/noshi91/status/1645808228067078144</li> <li>x86 Bit manipulation instruction set - Wikipedeia</li> </ul>"},{"location":"note/digital_fps_theory/","title":"\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570 ~\u7406\u8ad6\u7de8~","text":""},{"location":"note/digital_fps_theory/#m-","title":"\\(m\\)-\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570","text":""},{"location":"note/digital_fps_theory/#_2","title":"\u5b9a\u7fa9","text":"<p>\u57fa\u6570 \\(m \\ge 2\\) \u30921\u3064\u56fa\u5b9a\u3057\u305f\u6642\u3001 $$ f(x) = \\prod_{k \\ge 0} Q_{k}(x^{m^{k}}) $$ \u306e\u3088\u3046\u306b\u3001\u3042\u308b\u591a\u9805\u5f0f\u5217 \\(\\{ Q_{k}(x) \\}^{\\infty}_{k=0}\\) \u304c\u5b58\u5728\u3057\u3001\\(Q_{k}(0) = 1 (k \\ge 0)\\) \u3092\u6e80\u305f\u3059\u3001\u5f62\u5f0f\u7684\u51aa\u7d1a\u6570\u306e\u3053\u3068\u3092\u6307\u3059\u3002</p>"},{"location":"note/digital_fps_theory/#_3","title":"\u4f8b","text":"<p>$$ \\frac{1}{1-x} = 1 + x + x^{2} + x^{3} + \\cdots $$ \u306f\u4e8c\u9032\u6570\u5c55\u958b\u3092\u8003\u3048\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u73fe\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002</p> <p>$$ \\frac{1}{1-x} = (1 + x)(1 + x^{2})(1 + x^{4})(1 + x^{8}) \\cdots $$ \u5f93\u3063\u3066\u3001\\(Q_{k}(x) = (1 + x)\\) \u3068\u304a\u304f\u3053\u3068\u3067\u3001\\(1 / (1 - x)\\) \u306f\u30012-\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002</p>"},{"location":"note/digital_fps_theory/#lsb-first","title":"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 (LSB-first)","text":"<p>\u4efb\u610f\u306e \\(m \\ge 2\\) \u3068 \\(t \\in \\{ 0, 1, \\ldots, m-1 \\}\\) \u306b\u3064\u3044\u3066\u3001\u30bb\u30af\u30b7\u30e7\u30f3\u30aa\u30da\u30ec\u30fc\u30bf \\(S_{t, m}\\) \u3092 $$ S_{t, m} \\left(\\sum_{n \\ge 0} a_{n} x^{n} \\right) := \\sum_{n \\ge 0} a_{(nm+t)} x^{n} $$ \u3068\u5b9a\u7fa9\u3059\u308b\u3002\u7279\u306b \\(m=2\\) \u306e\u6642\u306f\u3001\u5076\u6570\u6b21\u3068\u5947\u6570\u6b21\u306e\u9805\u3092\u305d\u308c\u305e\u308c\u53d6\u308a\u51fa\u3059\u3001\u3068\u3044\u3046\u64cd\u4f5c\u306b\u8a72\u5f53\u3059\u308b\u3002 $$ S_{0, 2}(f(x)) = a_0 + a_2 x + a_4 x^2 + \\cdots $$ $$ S_{1, 2}(f(x)) = a_1 + a_3 x + a_5 x^2 + \\cdots $$ \u4ee5\u4e0b\u3001\u7c21\u5358\u306e\u305f\u3081 \\(m=2\\) \u306b\u56fa\u5b9a\u3057\u3066\u8003\u3048\u308b<sup>1</sup>\u3002\u307e\u305a\u3001\u4efb\u610f\u306e\u5f62\u5f0f\u7684\u51aa\u7d1a\u6570 \\(f(x)\\) \u306b\u3064\u3044\u3066\u3001 $$ [x^{N}]f(x) = [x^{\\lfloor N/2 \\rfloor}] S_{N \\bmod{2}}(f(x)) $$ \u304c\u6210\u7acb\u3059\u308b\u3002\u3053\u3053\u3067\u30012-\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570 \\(B_{0}(x), B_{1}(x), \\cdots\\) \u304c\u3001\u5f62\u5f0f\u7684\u51aa\u7d1a\u6570 \\(Q_{k}(x)\\) \u3092\u7528\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u8868\u305b\u308b\u3082\u306e\u3068\u3059\u308b\u3002 $$ B_{n}(x) = \\prod_{k \\ge 0}Q_{n+k}(x^{2^{k}}) $$ \u3053\u306e\u6642\u3001\\(S_{i}\\) \u306f\u3001\\(\\bmod{2}\\) \u306e\u5024\u3054\u3068\u306b\u3001\\(x\\) \u306e\u6b21\u6570\u3092 \\(2\\) \u3067\u5272\u3063\u3066\u3044\u308b\u64cd\u4f5c\u3067\u3042\u308b\u3053\u3068\u306b\u7559\u610f\u3059\u308b\u3068\u3001  $$ S_{i} (B_{n}(x)) = S_{i} (Q_{n}(x)) \\prod_{k \\ge 1}Q_{n+k}(x^{2^{k-1}}) = S_{i}(Q_{n}(x)) B_{n+1}(x) $$ \u304c\u5f97\u3089\u308c\u308b\u3002\u540c\u69d8\u306b\u3001\u5f62\u5f0f\u7684\u51aa\u7d1a\u6570 \\(A(x)\\) \u3068 \\(B_{n}(x)\\) \u306e\u7a4d\u306b\u5bfe\u3057\u3066\u3001\\(S_{i}\\) \u3092\u4f5c\u7528\u3055\u305b\u308b\u3068\u3001\u4ee5\u4e0b\u304c\u6210\u7acb\u3059\u308b\u3002 $$ S_{i} (A(x) B_{n}(x)) = S_{i} (A(x)Q_{n}(x)) \\prod_{k \\ge 1}Q_{n+k}(x^{2^{k-1}}) = S_{i}(A(x)Q_{n}(x)) B_{n+1}(x) $$ \u4ee5\u4e0a\u3088\u308a\u30012-\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570 \\(\\prod_{k \\ge 0} Q_k(x^{2^k})\\) \u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3001\u4ee5\u4e0b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067 \\(N\\) \u9805\u76ee\u306e\u4fc2\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002</p> <pre><code>k &lt;- 0\nA &lt;- 1\nwhile N &gt; 0 do\n    A &lt;- S(N % 2, A * Q_k)\n    k &lt;- k + 1\n    N &lt;- N / 2\nend while\nreturn A[0]\n</code></pre>"},{"location":"note/digital_fps_theory/#reference","title":"Reference","text":"<ul> <li>\u6841dp\u3092\u4ee3\u6570\u7684\u306b\u3084\u3063\u3064\u3051\u308b - Qiita</li> <li>Editorial - ABC300 Ex. Fibonacci: Revisited</li> </ul> <ol> <li> <p>\u4efb\u610f\u306e \\(m\\) \u306b\u5bfe\u3057\u3066\u3082\u3001\u540c\u69d8\u306b\u6210\u7acb\u3059\u308b\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"note/note/","title":"Note","text":"<p>\u3044\u308d\u3044\u308d\u30e1\u30e2\u3000\u65e7scrapbox\u306b\u66f8\u3044\u3066\u305f\u5185\u5bb9\u3092\u5f15\u3063\u8d8a\u3057\u4e88\u5b9a</p>"},{"location":"note/note/#math","title":"Math","text":"<ul> <li>\u30c7\u30b8\u30bf\u30eb\u51aa\u7d1a\u6570 ~\u7406\u8ad6\u7de8~</li> </ul>"},{"location":"note/note/#bitwise-operation","title":"Bitwise operation","text":"<ul> <li>\u30d3\u30c3\u30c8\u6f14\u7b97\u3042\u308c\u3053\u308c</li> </ul>"}]}